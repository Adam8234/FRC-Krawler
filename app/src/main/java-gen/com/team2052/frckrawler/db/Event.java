package com.team2052.frckrawler.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.team2052.frckrawler.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "EVENT".
 */
@Entity(active = true)
public class Event implements java.io.Serializable {

    @Id
    private Long id;

    @Unique
    private String fmsid;
    private String name;
    private long game_id;
    private String data;
    private java.util.Date date;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient EventDao myDao;

    @ToOne(joinProperty = "game_id")
    private Game game;

    @Generated
    private transient Long game__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "event_id")
    })
    private List<MatchComment> matchCommentList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "event_id")
    })
    private List<RobotEvent> robotEventList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "event_id")
    })
    private List<Match> matchList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "event_id")
    })
    private List<MatchData> matchDataList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "event_id")
    })
    private List<PitData> pitDataList;

    @Generated
    public Event() {
    }

    public Event(Long id) {
        this.id = id;
    }

    @Generated
    public Event(Long id, String fmsid, String name, long game_id, String data, java.util.Date date) {
        this.id = id;
        this.fmsid = fmsid;
        this.name = name;
        this.game_id = game_id;
        this.data = data;
        this.date = date;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEventDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFmsid() {
        return fmsid;
    }

    public void setFmsid(String fmsid) {
        this.fmsid = fmsid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getGame_id() {
        return game_id;
    }

    public void setGame_id(long game_id) {
        this.game_id = game_id;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Game getGame() {
        long __key = this.game_id;
        if (game__resolvedKey == null || !game__resolvedKey.equals(__key)) {
            __throwIfDetached();
            GameDao targetDao = daoSession.getGameDao();
            Game gameNew = targetDao.load(__key);
            synchronized (this) {
                game = gameNew;
            	game__resolvedKey = __key;
            }
        }
        return game;
    }

    @Generated
    public void setGame(Game game) {
        if (game == null) {
            throw new DaoException("To-one property 'game_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.game = game;
            game_id = game.getId();
            game__resolvedKey = game_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<MatchComment> getMatchCommentList() {
        if (matchCommentList == null) {
            __throwIfDetached();
            MatchCommentDao targetDao = daoSession.getMatchCommentDao();
            List<MatchComment> matchCommentListNew = targetDao._queryEvent_MatchCommentList(id);
            synchronized (this) {
                if(matchCommentList == null) {
                    matchCommentList = matchCommentListNew;
                }
            }
        }
        return matchCommentList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetMatchCommentList() {
        matchCommentList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<RobotEvent> getRobotEventList() {
        if (robotEventList == null) {
            __throwIfDetached();
            RobotEventDao targetDao = daoSession.getRobotEventDao();
            List<RobotEvent> robotEventListNew = targetDao._queryEvent_RobotEventList(id);
            synchronized (this) {
                if(robotEventList == null) {
                    robotEventList = robotEventListNew;
                }
            }
        }
        return robotEventList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetRobotEventList() {
        robotEventList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Match> getMatchList() {
        if (matchList == null) {
            __throwIfDetached();
            MatchDao targetDao = daoSession.getMatchDao();
            List<Match> matchListNew = targetDao._queryEvent_MatchList(id);
            synchronized (this) {
                if(matchList == null) {
                    matchList = matchListNew;
                }
            }
        }
        return matchList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetMatchList() {
        matchList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<MatchData> getMatchDataList() {
        if (matchDataList == null) {
            __throwIfDetached();
            MatchDataDao targetDao = daoSession.getMatchDataDao();
            List<MatchData> matchDataListNew = targetDao._queryEvent_MatchDataList(id);
            synchronized (this) {
                if(matchDataList == null) {
                    matchDataList = matchDataListNew;
                }
            }
        }
        return matchDataList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetMatchDataList() {
        matchDataList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PitData> getPitDataList() {
        if (pitDataList == null) {
            __throwIfDetached();
            PitDataDao targetDao = daoSession.getPitDataDao();
            List<PitData> pitDataListNew = targetDao._queryEvent_PitDataList(id);
            synchronized (this) {
                if(pitDataList == null) {
                    pitDataList = pitDataListNew;
                }
            }
        }
        return pitDataList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPitDataList() {
        pitDataList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
