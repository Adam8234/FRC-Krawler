package com.team2052.frckrawler.db;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;
import org.greenrobot.greendao.annotation.Unique;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "USER".
 */
@Entity(active = true)
public class User implements java.io.Serializable {

    @Id(autoincrement = true)
    @Unique
    private Long id;
    private String name;

    /**
     * Used to resolve relations
     */
    @Generated
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    @Generated
    private transient UserDao myDao;

    @ToMany(joinProperties = {
            @JoinProperty(name = "id", referencedName = "user_id")
    })
    private List<MatchData> matchDataList;

    @ToMany(joinProperties = {
            @JoinProperty(name = "id", referencedName = "user_id")
    })
    private List<PitData> pitDataList;

    @Generated
    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    @Generated
    public User(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated
    public List<MatchData> getMatchDataList() {
        if (matchDataList == null) {
            __throwIfDetached();
            MatchDataDao targetDao = daoSession.getMatchDataDao();
            List<MatchData> matchDataListNew = targetDao._queryUser_MatchDataList(id);
            synchronized (this) {
                if (matchDataList == null) {
                    matchDataList = matchDataListNew;
                }
            }
        }
        return matchDataList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    @Generated
    public synchronized void resetMatchDataList() {
        matchDataList = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated
    public List<PitData> getPitDataList() {
        if (pitDataList == null) {
            __throwIfDetached();
            PitDataDao targetDao = daoSession.getPitDataDao();
            List<PitData> pitDataListNew = targetDao._queryUser_PitDataList(id);
            synchronized (this) {
                if (pitDataList == null) {
                    pitDataList = pitDataListNew;
                }
            }
        }
        return pitDataList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    @Generated
    public synchronized void resetPitDataList() {
        pitDataList = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
